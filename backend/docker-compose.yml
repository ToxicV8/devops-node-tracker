services:
  # Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "4000:4000"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DATABASE_URL=postgresql://issuetracker:${POSTGRES_PASSWORD:-secure_password_2024}@postgres:5432/issuetracker_db
      - JWT_SECRET=${JWT_SECRET:-development_jwt_secret_please_change}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./prisma/migrations:/app/prisma/migrations:ro
    secrets:
      - db_password
      - jwt_secret

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: issuetracker_db
      POSTGRES_USER: issuetracker
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_2024}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U issuetracker -d issuetracker_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - db_password

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    networks:
      - app-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge

# Docker Secrets for Production
secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt 